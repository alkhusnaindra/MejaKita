// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Meja {
  id      Int        @id @default(autoincrement())
  uuid    String     @unique
  status  StatusMeja @default(TERSEDIA)
  Pesanan Pesanan[]
}

enum StatusMeja {
  TERSEDIA
  DIPESAN
}

model Menu {
  id          Int           @id @default(autoincrement())
  nama        String
  deskripsi   String?
  harga       Int
  gambar      String?
  kategoriId  Int
  kategori    KategoriMenu  @relation(fields: [kategoriId], references: [id])
  PesananItem PesananItem[]
}

model KategoriMenu {
  id    Int    @id @default(autoincrement())
  nama  String
  menus Menu[]
}

model Pesanan {
  id         Int           @id @default(autoincrement())
  mejaId     Int
  totalHarga Int
  status     StatusPesanan @default(DIPROSES)
  meja       Meja          @relation(fields: [mejaId], references: [id])
  items      PesananItem[]
  pembayaran Pembayaran?
}

enum StatusPesanan {
  DIPROSES
  SELESAI
  DIBATALKAN
}

model PesananItem {
  id        Int     @id @default(autoincrement())
  pesananId Int
  menuId    Int
  jumlah    Int
  subtotal  Int
  pesanan   Pesanan @relation(fields: [pesananId], references: [id])
  menu      Menu    @relation(fields: [menuId], references: [id])
}

model Pembayaran {
  id         Int              @default(autoincrement())
  pesananId  Int              @unique
  metode     MetodePembayaran
  status     StatusPembayaran @default(PENDING)
  midtransId String?
  pesanan    Pesanan          @relation(fields: [pesananId], references: [id])
}

enum MetodePembayaran {
  OFFLINE
  ONLINE
}

enum StatusPembayaran {
  PENDING
  SUCCESS
  FAILED
}
